from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates
from sqlalchemy.orm import Session
from typing import List, Dict, Any

templates = Jinja2Templates(directory="app/templates")

class BaseCRUD:
    def __init__(self, model):
        self.model = model

    def get_router(self):
        from fastapi import APIRouter
        router = APIRouter()
        router.add_api_route("/new", self.create_form, methods=["GET"])
        router.add_api_route("/{item_id}/edit", self.edit_form, methods=["GET"])
        return router

    async def create_form(self, request: Request, db: Session = Depends(get_db)):
        fields = getattr(self.model, '__fields__', [])
        return templates.TemplateResponse("form.html", {
            "request": request,
            "item": None,
            "table_name": self.model.__tablename__,
            "model_name": self.model.__name__,
            "fields": fields
        })

    async def edit_form(self, request: Request, item_id: int, db: Session = Depends(get_db)):
        item = db.query(self.model).get(item_id)
        if not item:
            raise HTTPException(status_code=404, detail="Item not found")
        fields = getattr(self.model, '__fields__', [])
        return templates.TemplateResponse("form.html", {
            "request": request,
            "item": item,
            "table_name": self.model.__tablename__,
            "model_name": self.model.__name__,
            "fields": fields
        })